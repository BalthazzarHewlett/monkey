import functools
import subprocess
from dataclasses import dataclass
from typing import List

from common.common_consts.timeouts import LONG_REQUEST_TIMEOUT
from infection_monkey.model import ID_STRING


@dataclass
class PsExecOutput:
    output: str
    return_code: int


@dataclass
class PsExecFlags:
    username = "-u"
    password = "-p"
    copy_and_execute_file = "-c"
    force = "-f"
    no_banner = "-nobanner"
    no_eula = "-accepteula"
    detach_process = "-d"
    timeout = "-n"


def fix_command_argument(func):
    @functools.wraps(func)
    def func_call(self, cmd):
        if type(cmd) == str:
            cmd = cmd.split(" ")
            cmd = [param for param in cmd if param != "" and param != " "]
        cmd = [str(param) for param in cmd]
        return func(self, cmd)

    return func_call


class PsExecApi:
    PSEXEC_BINARY = "infection_monkey/temp_bin_tools/PsExec.exe"

    def __init__(self, target_ip: str, username: str, password: str):
        self.target_ip = target_ip
        self.username = username
        self.password = password

    @fix_command_argument
    def execute_command(self, command: List[str]) -> PsExecOutput:
        cmd = self._get_base_cmd()
        cmd.extend(command)
        process = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        return PsExecOutput(process.stdout.decode(), process.returncode)

    @fix_command_argument
    def send_and_run_file(self, file_execution_command: List[str]) -> PsExecOutput:
        file_cp_and_run_flags = [
            PsExecFlags.force,
            PsExecFlags.detach_process,
            PsExecFlags.copy_and_execute_file,
            *file_execution_command,
        ]
        return self.execute_command(file_cp_and_run_flags)

    def _get_base_cmd(self) -> List[str]:
        return [
            PsExecApi.PSEXEC_BINARY,
            f"\\\\{self.target_ip}",
            PsExecFlags.no_eula,
            PsExecFlags.no_banner,
            PsExecFlags.timeout,
            str(LONG_REQUEST_TIMEOUT),
            PsExecFlags.username,
            self.username,
            PsExecFlags.password,
            self.password,
        ]

    def is_valid_credentials(self):
        return self.execute_command(["cmd", "/c", "echo", ID_STRING]).return_code == 0
